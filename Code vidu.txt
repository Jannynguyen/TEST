# Ứng dụng J2EE Quản lý Kho - Hướng dẫn từng bước

## Bước 1: Thiết lập dự án trong NetBeans

### 1.1 Tạo Enterprise Application Project
1. Mở NetBeans IDE
2. File → New Project → Java EE → Enterprise Application
3. Đặt tên: `WarehouseManagement`
4. Chọn Application Server: GlassFish hoặc WildFly
5. Java EE Version: Java EE 8

### 1.2 Cấu trúc dự án sẽ có:
- `WarehouseManagement-ejb`: Module EJB
- `WarehouseManagement-war`: Module Web (Servlet + JSP)
- `WarehouseManagement`: Enterprise Application

## Bước 2: Tạo Entity Classes (JPA)

### 2.1 Trong module EJB, tạo package `entity`

```java
// Product.java
package entity;

import javax.persistence.*;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

@Entity
@Table(name = "products")
public class Product implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(nullable = false)
    private String name;
    
    @Column(nullable = false)
    private String code;
    
    private String description;
    
    @Column(nullable = false)
    private Integer quantity;
    
    @Column(name = "unit_price")
    private BigDecimal unitPrice;
    
    @Column(name = "min_stock")
    private Integer minStock = 10;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_date")
    private Date createdDate;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "updated_date")
    private Date updatedDate;
    
    // Constructors
    public Product() {}
    
    public Product(String name, String code, String description, 
                   Integer quantity, BigDecimal unitPrice, Integer minStock) {
        this.name = name;
        this.code = code;
        this.description = description;
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        this.minStock = minStock;
        this.createdDate = new Date();
        this.updatedDate = new Date();
    }
    
    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
    
    public String getCode() { return code; }
    public void setCode(String code) { this.code = code; }
    
    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }
    
    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) { 
        this.quantity = quantity;
        this.updatedDate = new Date();
    }
    
    public BigDecimal getUnitPrice() { return unitPrice; }
    public void setUnitPrice(BigDecimal unitPrice) { this.unitPrice = unitPrice; }
    
    public Integer getMinStock() { return minStock; }
    public void setMinStock(Integer minStock) { this.minStock = minStock; }
    
    public Date getCreatedDate() { return createdDate; }
    public void setCreatedDate(Date createdDate) { this.createdDate = createdDate; }
    
    public Date getUpdatedDate() { return updatedDate; }
    public void setUpdatedDate(Date updatedDate) { this.updatedDate = updatedDate; }
    
    // Business methods
    public boolean isLowStock() {
        return quantity <= minStock;
    }
}
```

```java
// Transaction.java
package entity;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Date;

@Entity
@Table(name = "transactions")
public class Transaction implements Serializable {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @ManyToOne
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;
    
    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private TransactionType type;
    
    @Column(nullable = false)
    private Integer quantity;
    
    private String notes;
    
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "transaction_date")
    private Date transactionDate;
    
    // Constructors
    public Transaction() {}
    
    public Transaction(Product product, TransactionType type, 
                      Integer quantity, String notes) {
        this.product = product;
        this.type = type;
        this.quantity = quantity;
        this.notes = notes;
        this.transactionDate = new Date();
    }
    
    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    
    public Product getProduct() { return product; }
    public void setProduct(Product product) { this.product = product; }
    
    public TransactionType getType() { return type; }
    public void setType(TransactionType type) { this.type = type; }
    
    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) { this.quantity = quantity; }
    
    public String getNotes() { return notes; }
    public void setNotes(String notes) { this.notes = notes; }
    
    public Date getTransactionDate() { return transactionDate; }
    public void setTransactionDate(Date transactionDate) { this.transactionDate = transactionDate; }
}

enum TransactionType {
    IN, OUT
}
```

## Bước 3: Tạo EJB Session Beans

### 3.1 Tạo Remote Interface

```java
// WarehouseServiceRemote.java
package ejb;

import entity.Product;
import entity.Transaction;
import javax.ejb.Remote;
import java.util.List;

@Remote
public interface WarehouseServiceRemote {
    List<Product> getAllProducts();
    Product getProductById(Long id);
    Product getProductByCode(String code);
    void addProduct(Product product);
    void updateProduct(Product product);
    void deleteProduct(Long id);
    
    void addStock(String productCode, Integer quantity, String notes);
    void removeStock(String productCode, Integer quantity, String notes);
    
    List<Transaction> getTransactionHistory();
    List<Transaction> getTransactionsByProduct(Long productId);
    
    List<Product> getLowStockProducts();
}
```

### 3.2 Tạo Session Bean Implementation

```java
// WarehouseService.java
package ejb;

import entity.Product;
import entity.Transaction;
import entity.TransactionType;
import javax.ejb.Stateless;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import java.util.List;
import javax.annotation.Resource;
import javax.jms.*;

@Stateless
public class WarehouseService implements WarehouseServiceRemote {
    
    @PersistenceContext
    private EntityManager em;
    
    @Resource(mappedName = "jms/WarehouseConnectionFactory")
    private ConnectionFactory connectionFactory;
    
    @Resource(mappedName = "jms/LowStockQueue")
    private Queue lowStockQueue;
    
    @Override
    public List<Product> getAllProducts() {
        TypedQuery<Product> query = em.createQuery(
            "SELECT p FROM Product p ORDER BY p.name", Product.class);
        return query.getResultList();
    }
    
    @Override
    public Product getProductById(Long id) {
        return em.find(Product.class, id);
    }
    
    @Override
    public Product getProductByCode(String code) {
        TypedQuery<Product> query = em.createQuery(
            "SELECT p FROM Product p WHERE p.code = :code", Product.class);
        query.setParameter("code", code);
        List<Product> results = query.getResultList();
        return results.isEmpty() ? null : results.get(0);
    }
    
    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void addProduct(Product product) {
        em.persist(product);
    }
    
    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void updateProduct(Product product) {
        em.merge(product);
    }
    
    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void deleteProduct(Long id) {
        Product product = em.find(Product.class, id);
        if (product != null) {
            em.remove(product);
        }
    }
    
    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void addStock(String productCode, Integer quantity, String notes) {
        Product product = getProductByCode(productCode);
        if (product == null) {
            throw new RuntimeException("Product not found: " + productCode);
        }
        
        // Update product quantity
        product.setQuantity(product.getQuantity() + quantity);
        em.merge(product);
        
        // Create transaction record
        Transaction transaction = new Transaction(product, TransactionType.IN, quantity, notes);
        em.persist(transaction);
    }
    
    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void removeStock(String productCode, Integer quantity, String notes) {
        Product product = getProductByCode(productCode);
        if (product == null) {
            throw new RuntimeException("Product not found: " + productCode);
        }
        
        if (product.getQuantity() < quantity) {
            throw new RuntimeException("Insufficient stock. Available: " + 
                product.getQuantity() + ", Requested: " + quantity);
        }
        
        // Update product quantity
        product.setQuantity(product.getQuantity() - quantity);
        em.merge(product);
        
        // Create transaction record
        Transaction transaction = new Transaction(product, TransactionType.OUT, quantity, notes);
        em.persist(transaction);
        
        // Check if stock is low and send JMS message
        if (product.isLowStock()) {
            sendLowStockAlert(product);
        }
    }
    
    @Override
    public List<Transaction> getTransactionHistory() {
        TypedQuery<Transaction> query = em.createQuery(
            "SELECT t FROM Transaction t ORDER BY t.transactionDate DESC", Transaction.class);
        return query.getResultList();
    }
    
    @Override
    public List<Transaction> getTransactionsByProduct(Long productId) {
        TypedQuery<Transaction> query = em.createQuery(
            "SELECT t FROM Transaction t WHERE t.product.id = :productId ORDER BY t.transactionDate DESC", 
            Transaction.class);
        query.setParameter("productId", productId);
        return query.getResultList();
    }
    
    @Override
    public List<Product> getLowStockProducts() {
        TypedQuery<Product> query = em.createQuery(
            "SELECT p FROM Product p WHERE p.quantity <= p.minStock", Product.class);
        return query.getResultList();
    }
    
    private void sendLowStockAlert(Product product) {
        try {
            Connection connection = connectionFactory.createConnection();
            Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
            MessageProducer producer = session.createProducer(lowStockQueue);
            
            TextMessage message = session.createTextMessage();
            message.setText("LOW STOCK ALERT: Product " + product.getName() + 
                           " (Code: " + product.getCode() + ") is running low. " +
                           "Current quantity: " + product.getQuantity() + 
                           ", Minimum stock: " + product.getMinStock());
            message.setStringProperty("productCode", product.getCode());
            message.setStringProperty("productName", product.getName());
            message.setIntProperty("currentQuantity", product.getQuantity());
            message.setIntProperty("minStock", product.getMinStock());
            
            producer.send(message);
            
            connection.close();
        } catch (JMSException e) {
            e.printStackTrace();
        }
    }
}
```

## Bước 4: Tạo JMS Message-Driven Bean

```java
// LowStockNotificationMDB.java
package mdb;

import javax.ejb.ActivationConfigProperty;
import javax.ejb.MessageDriven;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageListener;
import javax.jms.TextMessage;
import java.util.logging.Logger;
import java.util.logging.Level;

@MessageDriven(activationConfig = {
    @ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue"),
    @ActivationConfigProperty(propertyName = "destination", propertyValue = "jms/LowStockQueue")
})
public class LowStockNotificationMDB implements MessageListener {
    
    private static final Logger logger = Logger.getLogger(LowStockNotificationMDB.class.getName());
    
    @Override
    public void onMessage(Message message) {
        try {
            if (message instanceof TextMessage) {
                TextMessage textMessage = (TextMessage) message;
                String alertMessage = textMessage.getText();
                String productCode = textMessage.getStringProperty("productCode");
                String productName = textMessage.getStringProperty("productName");
                int currentQuantity = textMessage.getIntProperty("currentQuantity");
                int minStock = textMessage.getIntProperty("minStock");
                
                // Log the alert
                logger.log(Level.WARNING, "LOW STOCK ALERT RECEIVED: {0}", alertMessage);
                
                // Here you can implement additional logic such as:
                // - Send email notifications
                // - Update external systems
                // - Create purchase orders
                // - Send SMS alerts
                
                processLowStockAlert(productCode, productName, currentQuantity, minStock);
                
            }
        } catch (JMSException e) {
            logger.log(Level.SEVERE, "Error processing low stock message", e);
        }
    }
    
    private void processLowStockAlert(String productCode, String productName, 
                                    int currentQuantity, int minStock) {
        // Implement your business logic here
        // For example: send email, create purchase order, etc.
        
        System.out.println("=== LOW STOCK ALERT ===");
        System.out.println("Product: " + productName + " (" + productCode + ")");
        System.out.println("Current Quantity: " + currentQuantity);
        System.out.println("Minimum Stock: " + minStock);
        System.out.println("Action Required: Reorder stock!");
        System.out.println("========================");
    }
}
```

## Bước 5: Tạo Servlets (Module WAR)

### 5.1 Tạo Base Servlet

```java
// WarehouseServlet.java
package servlet;

import ejb.WarehouseServiceRemote;
import entity.Product;
import javax.ejb.EJB;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;

@WebServlet(name = "WarehouseServlet", urlPatterns = {"/warehouse"})
public class WarehouseServlet extends HttpServlet {
    
    @EJB
    private WarehouseServiceRemote warehouseService;
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        if (action == null) {
            action = "list";
        }
        
        switch (action) {
            case "list":
                listProducts(request, response);
                break;
            case "add":
                showAddForm(request, response);
                break;
            case "edit":
                showEditForm(request, response);
                break;
            case "delete":
                deleteProduct(request, response);
                break;
            case "transactions":
                showTransactions(request, response);
                break;
            case "lowstock":
                showLowStockProducts(request, response);
                break;
            default:
                listProducts(request, response);
        }
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        switch (action) {
            case "add":
                addProduct(request, response);
                break;
            case "update":
                updateProduct(request, response);
                break;
            case "addstock":
                addStock(request, response);
                break;
            case "removestock":
                removeStock(request, response);
                break;
            default:
                listProducts(request, response);
        }
    }
    
    private void listProducts(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<Product> products = warehouseService.getAllProducts();
        request.setAttribute("products", products);
        request.getRequestDispatcher("/WEB-INF/jsp/productList.jsp").forward(request, response);
    }
    
    private void showAddForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/WEB-INF/jsp/addProduct.jsp").forward(request, response);
    }
    
    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        Long id = Long.parseLong(request.getParameter("id"));
        Product product = warehouseService.getProductById(id);
        request.setAttribute("product", product);
        request.getRequestDispatcher("/WEB-INF/jsp/editProduct.jsp").forward(request, response);
    }
    
    private void addProduct(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            String name = request.getParameter("name");
            String code = request.getParameter("code");
            String description = request.getParameter("description");
            Integer quantity = Integer.parseInt(request.getParameter("quantity"));
            BigDecimal unitPrice = new BigDecimal(request.getParameter("unitPrice"));
            Integer minStock = Integer.parseInt(request.getParameter("minStock"));
            
            Product product = new Product(name, code, description, quantity, unitPrice, minStock);
            warehouseService.addProduct(product);
            
            response.sendRedirect("warehouse?action=list&message=Product added successfully");
        } catch (Exception e) {
            request.setAttribute("error", "Error adding product: " + e.getMessage());
            request.getRequestDispatcher("/WEB-INF/jsp/addProduct.jsp").forward(request, response);
        }
    }
    
    private void updateProduct(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            Long id = Long.parseLong(request.getParameter("id"));
            Product product = warehouseService.getProductById(id);
            
            product.setName(request.getParameter("name"));
            product.setCode(request.getParameter("code"));
            product.setDescription(request.getParameter("description"));
            product.setQuantity(Integer.parseInt(request.getParameter("quantity")));
            product.setUnitPrice(new BigDecimal(request.getParameter("unitPrice")));
            product.setMinStock(Integer.parseInt(request.getParameter("minStock")));
            
            warehouseService.updateProduct(product);
            
            response.sendRedirect("warehouse?action=list&message=Product updated successfully");
        } catch (Exception e) {
            request.setAttribute("error", "Error updating product: " + e.getMessage());
            showEditForm(request, response);
        }
    }
    
    private void deleteProduct(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            Long id = Long.parseLong(request.getParameter("id"));
            warehouseService.deleteProduct(id);
            response.sendRedirect("warehouse?action=list&message=Product deleted successfully");
        } catch (Exception e) {
            response.sendRedirect("warehouse?action=list&error=Error deleting product: " + e.getMessage());
        }
    }
    
    private void addStock(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            String productCode = request.getParameter("productCode");
            Integer quantity = Integer.parseInt(request.getParameter("quantity"));
            String notes = request.getParameter("notes");
            
            warehouseService.addStock(productCode, quantity, notes);
            
            response.sendRedirect("warehouse?action=list&message=Stock added successfully");
        } catch (Exception e) {
            response.sendRedirect("warehouse?action=list&error=Error adding stock: " + e.getMessage());
        }
    }
    
    private void removeStock(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            String productCode = request.getParameter("productCode");
            Integer quantity = Integer.parseInt(request.getParameter("quantity"));
            String notes = request.getParameter("notes");
            
            warehouseService.removeStock(productCode, quantity, notes);
            
            response.sendRedirect("warehouse?action=list&message=Stock removed successfully");
        } catch (Exception e) {
            response.sendRedirect("warehouse?action=list&error=Error removing stock: " + e.getMessage());
        }
    }
    
    private void showTransactions(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setAttribute("transactions", warehouseService.getTransactionHistory());
        request.getRequestDispatcher("/WEB-INF/jsp/transactions.jsp").forward(request, response);
    }
    
    private void showLowStockProducts(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setAttribute("lowStockProducts", warehouseService.getLowStockProducts());
        request.getRequestDispatcher("/WEB-INF/jsp/lowStock.jsp").forward(request, response);
    }
}
```

## Bước 6: Tạo JSP Pages

### 6.1 Layout chính (header.jsp)

```jsp
<%-- header.jsp --%>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>

<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Warehouse Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="${pageContext.request.contextPath}/warehouse">
                <i class="fas fa-warehouse"></i> Warehouse Management
            </a>
            <div class="navbar-nav">
                <a class="nav-link" href="${pageContext.request.contextPath}/warehouse?action=list">
                    <i class="fas fa-list"></i> Products
                </a>
                <a class="nav-link" href="${pageContext.request.contextPath}/warehouse?action=add">
                    <i class="fas fa-plus"></i> Add Product
                </a>
                <a class="nav-link" href="${pageContext.request.contextPath}/warehouse?action=transactions">
                    <i class="fas fa-history"></i> Transactions
                </a>
                <a class="nav-link" href="${pageContext.request.contextPath}/warehouse?action=lowstock">
                    <i class="fas fa-exclamation-triangle"></i> Low Stock
                </a>
            </div>
        </div>
    </nav>
    
    <div class="container mt-4">
        <!-- Messages -->
        <c:if test="${not empty param.message}">
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                ${param.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </c:if>
        
        <c:if test="${not empty param.error}">
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                ${param.error}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </c:if>
        
        <c:if test="${not empty error}">
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                ${error}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        </c:if>
```

### 6.2 Danh sách sản phẩm (productList.jsp)

```jsp
<%-- productList.jsp --%>
<%@ include file="header.jsp" %>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0"><i class="fas fa-boxes"></i> Product Inventory</h5>
                <a href="warehouse?action=add" class="btn btn-primary">
                    <i class="fas fa-plus"></i> Add New Product
                </a>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Code</th>
                                <th>Name</th>
                                <th>Description</th>
                                <th>Quantity</th>
                                <th>Unit Price</th>
                                <th>Min Stock</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <c:forEach var="product" items="${products}">
                                <tr class="${product.lowStock ? 'table-warning' : ''}">
                                    <td><strong>${product.code}</strong></td>
                                    <td>${product.name}</td>
                                    <td>${product.description}</td>
                                    <td>
                                        <span class="badge ${product.lowStock ? 'bg-warning text-dark' : 'bg-success'}">
                                            ${product.quantity}
                                        </span>
                                    </td>
                                    <td><fmt:formatNumber value="${product.unitPrice}" pattern="#,##0.00" /> VND</td>
                                    <td>${product.minStock}</td>
                                    <td>
                                        <c:choose>
                                            <c:when test="${product.lowStock}">
                                                <span class="badge bg-warning text-dark">
                                                    <i class="fas fa-exclamation-triangle"></i> Low Stock
                                                </span>
                                            </c:when>
                                            <c:otherwise>
                                                <span class="badge bg-success">
                                                    <i class="fas fa-check"></i> In Stock
                                                </span>
                                            </c:otherwise>
                                        </c:choose>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-success btn-sm" 
                                                    onclick="showStockModal('${product.code}', 'add')">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                            <button type="button" class="btn btn-warning btn-sm" 
                                                    onclick="showStockModal('${product.code}', 'remove')">
                                                <i class="fas fa-minus"></i>
                                            </button>
                                            <a href="warehouse?action=edit&id=${product.id}" 
                                               class="btn btn-primary btn-sm">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a href="warehouse?action=delete&id=${product.id}" 
                                               class="btn btn-danger btn-sm"
                                               onclick="return confirm('Are you sure you want to delete this product?')">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            </c:forEach>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Stock Management Modal -->
<div class="modal fade" id="stockModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="stockModalTitle">Manage Stock</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="stockForm" method="post" action="warehouse">
                <div class="modal-body">
                    <input type="hidden" name="action" id="stockAction">
                    <input type="hidden" name="productCode" id="productCode">
                    
                    <div class="mb-3">
                        <label for="quantity" class="form-label">Quantity</label>
                        <input type="number" class="form-control" name="quantity